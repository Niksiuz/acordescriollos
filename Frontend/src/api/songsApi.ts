import axios from "axios";

// Usa la URL del entorno si est√° definida, o fallback a localhost
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:5000";

// Instancia de Axios
const api = axios.create({
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

// Tipo de canci√≥n
export interface Song {
  id: number;
  title: string;
  artist: string;
  genre: string;
  lyrics: string;
}

// Obtener todas las canciones
export const fetchSongs = async (): Promise<Song[]> => {
  try {
    const response = await api.get<Song[]>("/api/songs");
    if (!Array.isArray(response.data)) {
      console.error("‚ö†Ô∏è La respuesta no es un array:", response.data);
      return [];
    }
    return response.data;
  } catch (error: any) {
    console.error("‚ùå Error al obtener canciones:", error.message || error);
    return [];
  }
};

// Agregar una nueva canci√≥n
export const addSong = async (song: Omit<Song, "id">): Promise<Song> => {
  try {
    console.log("üéµ Enviando canci√≥n al backend:", song);
    // Ajusta aqu√≠ seg√∫n la respuesta de tu backend
    const response = await api.post<Song>("/api/songs", song);
    // Si el backend devuelve la canci√≥n directamente:
    return response.data;
    // Si devuelve { song: Song }, usa:
    // return response.data.song;
  } catch (error: any) {
    console.error(
      "‚ùå Error al agregar canci√≥n:",
      error.response?.data || error.message || error
    );
    throw error;
  }
};

// Obtener una canci√≥n por ID
export const fetchSongById = async (
  id: number | string
): Promise<Song | null> => {
  try {
    const response = await api.get<Song>(`/api/songs/${id}`);
    return response.data;
  } catch (error: any) {
    console.error(
      "‚ùå Error al obtener canci√≥n:",
      error.response?.data || error.message || error
    );
    return null;
  }
};
